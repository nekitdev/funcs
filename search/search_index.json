{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#funcs","title":"<code>funcs</code>","text":"<p>Functional programming in Python.</p>"},{"location":"#installing","title":"Installing","text":"<p>Python 3.8 or above is required.</p>"},{"location":"#pip","title":"<code>pip</code>","text":"<p>Installing the library with <code>pip</code> is quite simple:</p> <pre><code>$ pip install funcs\n</code></pre> <p>Alternatively, the library can be installed from source:</p> <pre><code>$ pip install git+https://github.com/nekitdev/funcs.git\n</code></pre> <p>Or via cloning the repository:</p> <pre><code>$ git clone https://github.com/nekitdev/funcs.git\n$ cd funcs\n$ pip install .\n</code></pre>"},{"location":"#uv","title":"<code>uv</code>","text":"<p>You can add <code>funcs</code> as a dependency with the following command:</p> <pre><code>$ uv add funcs\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>You can find the documentation here.</p>"},{"location":"#support","title":"Support","text":"<p>If you need support with the library, you can send an email or refer to the official Discord server.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>You can find the changelog here.</p>"},{"location":"#security-policy","title":"Security Policy","text":"<p>You can find the Security Policy of <code>funcs</code> here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you are interested in contributing to <code>funcs</code>, make sure to take a look at the Contributing Guide, as well as the Code of Conduct.</p>"},{"location":"#license","title":"License","text":"<p><code>funcs</code> is licensed under the MIT License terms. See License for details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#0101-2024-04-19","title":"0.10.1 (2024-04-19)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Exported <code>lru_cache</code>, <code>cache</code> and <code>cache_typed</code> from <code>funcs.decorators</code>.</li> </ul>"},{"location":"changelog/#changes","title":"Changes","text":"<ul> <li><code>asyncify(function)</code> now uses <code>@wraps(function)</code> under the hood.</li> </ul>"},{"location":"changelog/#0100-2024-03-21","title":"0.10.0 (2024-03-21)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Added <code>juxt</code>.</li> </ul>"},{"location":"changelog/#changes_1","title":"Changes","text":"<ul> <li> <p>Renamed <code>always</code> to <code>returns</code>.</p> </li> <li> <p>Renamed modules:</p> </li> <li><code>debug</code> to <code>debugging</code>;</li> <li><code>flow</code> to <code>flows</code>.</li> </ul>"},{"location":"changelog/#internal","title":"Internal","text":"<ul> <li><code>is_marker</code> now accepts <code>Any</code> as the argument.</li> </ul>"},{"location":"changelog/#092-2024-03-14","title":"0.9.2 (2024-03-14)","text":""},{"location":"changelog/#internal_1","title":"Internal","text":"<ul> <li><code>TypeIs</code> is now used instead of <code>TypeGuard</code> for more precise type narrowing.</li> </ul>"},{"location":"changelog/#091-2024-02-26","title":"0.9.1 (2024-02-26)","text":"<p>No significant changes.</p>"},{"location":"changelog/#090-2024-02-24","title":"0.9.0 (2024-02-24)","text":""},{"location":"changelog/#internal_2","title":"Internal","text":"<ul> <li>Dropped Python 3.7 support.</li> </ul>"},{"location":"changelog/#080-2023-05-31","title":"0.8.0 (2023-05-31)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Added <code>awaiting</code> function.</li> </ul>"},{"location":"changelog/#071-2023-05-24","title":"0.7.1 (2023-05-24)","text":""},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>Fixed <code>final</code> import to be compatible with Python 3.7.</li> </ul>"},{"location":"changelog/#070-2023-05-22","title":"0.7.0 (2023-05-22)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Added <code>@cache</code> and <code>@cache_typed</code> decorators.</li> </ul>"},{"location":"changelog/#060-2023-05-21","title":"0.6.0 (2023-05-21)","text":""},{"location":"changelog/#removals","title":"Removals","text":"<ul> <li>Removed <code>funcs.typing</code> module. Consider using <code>typing-aliases</code> library instead.</li> </ul>"},{"location":"changelog/#051-2023-04-24","title":"0.5.1 (2023-04-24)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Exported the <code>inspect</code> function (from <code>funcs.debug</code>).</li> </ul>"},{"location":"changelog/#050-2023-04-23","title":"0.5.0 (2023-04-23)","text":""},{"location":"changelog/#changes_2","title":"Changes","text":"<ul> <li><code>Error</code>, <code>ErrorType</code> and <code>ErrorTypes</code> have been renamed to <code>NormalError</code>, <code>NormalErrorType</code>   and <code>NormalErrorTypes</code> respectively.</li> </ul>"},{"location":"changelog/#040-2023-04-21","title":"0.4.0 (2023-04-21)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Documented the entire library.</li> </ul>"},{"location":"changelog/#030-2023-04-20","title":"0.3.0 (2023-04-20)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Added <code>asyncify</code> function.</li> </ul>"},{"location":"changelog/#024-2023-04-18","title":"0.2.4 (2023-04-18)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Added <code>DynamicAsyncCallable</code> and <code>AnyAsyncCallable</code> types to <code>funcs.typing</code>.</li> </ul>"},{"location":"changelog/#023-2023-04-18","title":"0.2.3 (2023-04-18)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Added <code>TupleN</code> (homogenous tuples) and <code>Compare</code> (comparing functions) to <code>funcs.typing</code>.</li> </ul>"},{"location":"changelog/#022-2023-04-17","title":"0.2.2 (2023-04-17)","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Added more types to <code>funcs.typing</code> module, for instance, <code>Identity</code>, <code>Inspect</code>, <code>Decorator</code>.</li> </ul>"},{"location":"changelog/#021-2023-04-12","title":"0.2.1 (2023-04-12)","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Added metadata to the library.</li> </ul>"},{"location":"changelog/#020-2023-04-12","title":"0.2.0 (2023-04-12)","text":"<p>Initial release.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev.</p> <p>All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct.</p> <p>Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq. Translations are available at https://contributor-covenant.org/translations.</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#reporting","title":"Reporting","text":"<p>Thank you for taking the time to responsibly disclose any problems you find.</p> <p>Do not file public issues as they are open for everyone to see!</p> <p>All security vulnerabilities in <code>funcs</code> should be reported by email to security@nekit.dev. Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report.</p> <p>You can encrypt your report using our public key: <code>6AF9DDF87B37BBE6E83F5DF2B8F5B86F98F12F5E</code>. This key is also available on MIT's Key Server and reproduced below.</p> <p>After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.</p>"},{"location":"security/#disclosure-policy","title":"Disclosure Policy","text":"<p><code>funcs</code> has a 5-step disclosure process:</p> <ol> <li> <p>The security report is received and is assigned a primary handler.    This person will coordinate the fix and release process.</p> </li> <li> <p>The problem is confirmed and a list of all affected versions is determined.</p> </li> <li> <p>Code is audited to find any potential similar problems.</p> </li> <li> <p>Fixes are prepared for all releases which are still under maintenance.    These fixes are not committed to the public repository but rather    held locally pending the announcement.</p> </li> <li> <p>On the embargo date, the changes are pushed to the public repository    and new builds are deployed.</p> </li> </ol> <p>This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.</p>"},{"location":"security/#security-key","title":"Security Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\npbmAGLbBB2TBok4=\n=Ir8m\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"security/#attribution","title":"Attribution","text":"<p>This Security Policy is adapted from Rust's Security Policy.</p>"},{"location":"reference/application/","title":"Application","text":""},{"location":"reference/application/#funcs.application.partial","title":"<code>partial = standard_partial</code>  <code>module-attribute</code>","text":"<p>An alias of the standard <code>partial</code> type that implements partial application.</p>"},{"location":"reference/application/#funcs.application.apply","title":"<code>apply(function: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -&gt; R</code>","text":"<p>Applies the <code>function</code> to given positional and keyword arguments.</p> <pre><code>apply(function, *args, **kwargs)\n</code></pre> <p>Is identical to:</p> <pre><code>function(*args, **kwargs)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[P, R]</code> <p>The function to apply arguments to.</p> required <code>*args</code> <code>args</code> <p>Positional arguments to apply.</p> <code>()</code> <code>**kwargs</code> <code>kwargs</code> <p>Keyword arguments to apply.</p> <code>{}</code> <p>Returns:</p> Type Description <code>R</code> <p>The result of applying the <code>function</code> to given arguments.</p> Source code in <code>src/funcs/application.py</code> <pre><code>def apply(function: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -&gt; R:\n    \"\"\"Applies the `function` to given positional and keyword arguments.\n\n    ```python\n    apply(function, *args, **kwargs)\n    ```\n\n    Is identical to:\n\n    ```python\n    function(*args, **kwargs)\n    ```\n\n    Parameters:\n        function: The function to apply arguments to.\n        *args: Positional arguments to apply.\n        **kwargs: Keyword arguments to apply.\n\n    Returns:\n        The result of applying the `function` to given arguments.\n    \"\"\"\n    return function(*args, **kwargs)\n</code></pre>"},{"location":"reference/application/#funcs.application.juxt","title":"<code>juxt(*functions: Callable[P, Any]) -&gt; Callable[P, DynamicTuple[Any]]</code>","text":"<p>Returns the function that is the juxtaposition of given functions.</p> <p>Parameters:</p> Name Type Description Default <code>*functions</code> <code>Callable[P, Any]</code> <p>Functions to return the juxtaposition for.</p> <code>()</code> <p>Returns:</p> Type Description <code>Callable[P, DynamicTuple[Any]]</code> <p>The juxtaposition of given functions.</p> Source code in <code>src/funcs/application.py</code> <pre><code>def juxt(*functions: Callable[P, Any]) -&gt; Callable[P, DynamicTuple[Any]]:\n    \"\"\"Returns the function that is the juxtaposition of given functions.\n\n    Arguments:\n        *functions: Functions to return the juxtaposition for.\n\n    Returns:\n        The juxtaposition of given functions.\n    \"\"\"\n\n    def call(*args: P.args, **kwargs: P.kwargs) -&gt; DynamicTuple[Any]:\n        return tuple(function(*args, **kwargs) for function in functions)\n\n    return call\n</code></pre>"},{"location":"reference/callers/","title":"Callers","text":""},{"location":"reference/callers/#funcs.callers.method_caller","title":"<code>method_caller = standard_method_caller</code>  <code>module-attribute</code>","text":"<p>An alias of the standard <code>method_caller</code> type that implements method calling.</p>"},{"location":"reference/callers/#funcs.callers.Caller","title":"<code>Caller</code>","text":"<p>Represents function callers.</p> Source code in <code>src/funcs/callers.py</code> <pre><code>@final\n@frozen()\nclass Caller:\n    \"\"\"Represents function callers.\"\"\"\n\n    args: DynamicTuple[Any]\n    kwargs: StringDict[Any]\n\n    def __call__(self, function: DynamicCallable[R]) -&gt; R:\n        return function(*self.args, **self.kwargs)\n</code></pre>"},{"location":"reference/callers/#funcs.callers.caller","title":"<code>caller(*args: Any, **kwargs: Any) -&gt; Caller</code>","text":"<p>Creates a <code>Caller</code> that calls the given <code>function</code> with <code>*args</code> and <code>**kwargs</code>.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>The arguments to use.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to use.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Caller</code> <p>The <code>Caller</code> created.</p> Source code in <code>src/funcs/callers.py</code> <pre><code>def caller(*args: Any, **kwargs: Any) -&gt; Caller:\n    \"\"\"Creates a [`Caller`][funcs.callers.Caller] that calls the given\n    `function` with `*args` and `**kwargs`.\n\n    Arguments:\n        *args: The arguments to use.\n        **kwargs: The keyword arguments to use.\n\n    Returns:\n        The [`Caller`][funcs.callers.Caller] created.\n    \"\"\"\n    return Caller(args, kwargs)\n</code></pre>"},{"location":"reference/composition/","title":"Composition","text":""},{"location":"reference/composition/#funcs.composition.pipe_once","title":"<code>pipe_once(inner: Unary[T, U], outer: Unary[U, R]) -&gt; Unary[T, R]</code>","text":"<p>Composes two functions from left to right into one function.</p> <p>For instance, <code>pipe_once(f, g)(x)</code> is equivalent to <code>g(f(x))</code>.</p> <p>Parameters:</p> Name Type Description Default <code>inner</code> <code>Unary[T, U]</code> <p>The inner function.</p> required <code>outer</code> <code>Unary[U, R]</code> <p>The outer function.</p> required <p>Returns:</p> Type Description <code>Unary[T, R]</code> <p>The composed function.</p> Source code in <code>src/funcs/composition.py</code> <pre><code>def pipe_once(inner: Unary[T, U], outer: Unary[U, R]) -&gt; Unary[T, R]:\n    \"\"\"Composes two functions from left to right into one function.\n\n    For instance, `pipe_once(f, g)(x)` is equivalent to `g(f(x))`.\n\n    Arguments:\n        inner: The inner function.\n        outer: The outer function.\n\n    Returns:\n        The composed function.\n    \"\"\"\n\n    def piped(item: T) -&gt; R:\n        return outer(inner(item))\n\n    return piped\n</code></pre>"},{"location":"reference/composition/#funcs.composition.pipe","title":"<code>pipe(innermost: Unary[T, Any], *functions: Unary[Any, Any]) -&gt; Unary[T, Any]</code>","text":"<p>Composes multiple functions from left to right into one function.</p> <p>For instance, <code>pipe(f, g)(x)</code> is equivalent to <code>g(f(x))</code>.</p> <p>This function is equivalent to:</p> <pre><code>fold(innermost, pipe_once, functions)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>innermost</code> <code>Unary[T, Any]</code> <p>The innermost function.</p> required <code>*functions</code> <code>Unary[Any, Any]</code> <p>The rest of the functions.</p> <code>()</code> <p>Returns:</p> Type Description <code>Unary[T, Any]</code> <p>The composed function.</p> Source code in <code>src/funcs/composition.py</code> <pre><code>def pipe(innermost: Unary[T, Any], *functions: Unary[Any, Any]) -&gt; Unary[T, Any]:\n    \"\"\"Composes multiple functions from left to right into one function.\n\n    For instance, `pipe(f, g)(x)` is equivalent to `g(f(x))`.\n\n    This function is equivalent to:\n\n    ```python\n    fold(innermost, pipe_once, functions)\n    ```\n\n    Arguments:\n        innermost: The innermost function.\n        *functions: The rest of the functions.\n\n    Returns:\n        The composed function.\n    \"\"\"\n    return fold(innermost, pipe_once, functions)\n</code></pre>"},{"location":"reference/composition/#funcs.composition.compose_once","title":"<code>compose_once(outer: Unary[U, R], inner: Unary[T, U]) -&gt; Unary[T, R]</code>","text":"<p>Composes two functions from right to left into one function.</p> <p>For instance, <code>compose_once(f, g)(x)</code> is equivalent to <code>f(g(x))</code>.</p> <p>Parameters:</p> Name Type Description Default <code>outer</code> <code>Unary[U, R]</code> <p>The outer function.</p> required <code>inner</code> <code>Unary[T, U]</code> <p>The inner function.</p> required <p>Returns:</p> Type Description <code>Unary[T, R]</code> <p>The composed function.</p> Source code in <code>src/funcs/composition.py</code> <pre><code>def compose_once(outer: Unary[U, R], inner: Unary[T, U]) -&gt; Unary[T, R]:\n    \"\"\"Composes two functions from right to left into one function.\n\n    For instance, `compose_once(f, g)(x)` is equivalent to `f(g(x))`.\n\n    Arguments:\n        outer: The outer function.\n        inner: The inner function.\n\n    Returns:\n        The composed function.\n    \"\"\"\n\n    def composed(item: T) -&gt; R:\n        return outer(inner(item))\n\n    return composed\n</code></pre>"},{"location":"reference/composition/#funcs.composition.compose","title":"<code>compose(outermost: Unary[Any, T], *functions: Unary[Any, Any]) -&gt; Unary[Any, T]</code>","text":"<p>Composes multiple functions from right to left into one.</p> <p>For instance, <code>compose(f, g)(x)</code> is equivalent to <code>f(g(x))</code>.</p> <p>This function is equivalent to:</p> <pre><code>fold(outermost, compose_once, functions)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>outermost</code> <code>Unary[Any, T]</code> <p>The outermost function.</p> required <code>*functions</code> <code>Unary[Any, Any]</code> <p>The rest of the functions.</p> <code>()</code> <p>Returns:</p> Type Description <code>Unary[Any, T]</code> <p>The composed function.</p> Source code in <code>src/funcs/composition.py</code> <pre><code>def compose(outermost: Unary[Any, T], *functions: Unary[Any, Any]) -&gt; Unary[Any, T]:\n    \"\"\"Composes multiple functions from right to left into one.\n\n    For instance, `compose(f, g)(x)` is equivalent to `f(g(x))`.\n\n    This function is equivalent to:\n\n    ```python\n    fold(outermost, compose_once, functions)\n    ```\n\n    Arguments:\n        outermost: The outermost function.\n        *functions: The rest of the functions.\n\n    Returns:\n        The composed function.\n    \"\"\"\n    return fold(outermost, compose_once, functions)\n</code></pre>"},{"location":"reference/debugging/","title":"Debugging","text":""},{"location":"reference/debugging/#funcs.debugging.tap","title":"<code>tap(item: T, label: Optional[str] = None) -&gt; T</code>","text":"<p>Prints the given item with an optional label and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>T</code> <p>The item to print.</p> required <code>label</code> <code>Optional[str]</code> <p>The label to use.</p> <code>None</code> <p>Returns:</p> Type Description <code>T</code> <p>The given item.</p> Source code in <code>src/funcs/debugging.py</code> <pre><code>def tap(item: T, label: Optional[str] = None) -&gt; T:\n    \"\"\"Prints the given item with an optional label and returns it.\n\n    Arguments:\n        item: The item to print.\n        label: The label to use.\n\n    Returns:\n        The given item.\n    \"\"\"\n    if label is None:\n        print(item)\n\n    else:\n        print(label_string(label, item))\n\n    return item\n</code></pre>"},{"location":"reference/debugging/#funcs.debugging.inspect","title":"<code>inspect(function: Inspect[T], item: T) -&gt; T</code>","text":"<p>Inspects the given item with the <code>function</code> and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Inspect[T]</code> <p>The function to use.</p> required <code>item</code> <code>T</code> <p>The item to inspect.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The given item.</p> Source code in <code>src/funcs/debugging.py</code> <pre><code>def inspect(function: Inspect[T], item: T) -&gt; T:\n    \"\"\"Inspects the given item with the `function` and returns it.\n\n    Arguments:\n        function: The function to use.\n        item: The item to inspect.\n\n    Returns:\n        The given item.\n    \"\"\"\n    function(item)\n\n    return item\n</code></pre>"},{"location":"reference/decorators/","title":"Decorators","text":""},{"location":"reference/decorators/#funcs.decorators.wraps","title":"<code>wraps = standard_wraps</code>  <code>module-attribute</code>","text":"<p>An alias of the standard <code>wraps</code> function that implements wrapping.</p>"},{"location":"reference/decorators/#funcs.decorators.cache","title":"<code>cache = lru_cache(None)</code>  <code>module-attribute</code>","text":"<p>An alias of the standard <code>lru_cache</code> function with unbounded cache.</p>"},{"location":"reference/decorators/#funcs.decorators.cache_typed","title":"<code>cache_typed = lru_cache(None, typed=True)</code>  <code>module-attribute</code>","text":"<p>A variantion of <code>cache</code> that uses types.</p>"},{"location":"reference/flows/","title":"Flows","text":""},{"location":"reference/flows/#funcs.flows.Reraise","title":"<code>Reraise</code>","text":"<p>               Bases: <code>SimpleContextManager</code>, <code>Generic[E]</code></p> <p>Represents context managers that reraise errors of given <code>error_types</code> as <code>error</code>.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>@final\n@frozen()\nclass Reraise(SimpleContextManager, Generic[E]):\n    \"\"\"Represents context managers that reraise errors of given `error_types` as `error`.\"\"\"\n\n    error: E\n    \"\"\"The error to raise.\"\"\"\n    error_types: AnyErrorTypes\n    \"\"\"The error types to reraise.\"\"\"\n\n    def __enter__(self) -&gt; None:\n        pass\n\n    def __exit__(\n        self, error_type: Optional[Type[F]], error: Optional[F], traceback: Optional[Traceback]\n    ) -&gt; None:\n        if error_type is not None and error is not None:\n            if is_subclass(error_type, self.error_types):\n                raise self.error from error\n</code></pre>"},{"location":"reference/flows/#funcs.flows.Reraise.error","title":"<code>error: E</code>  <code>instance-attribute</code>","text":"<p>The error to raise.</p>"},{"location":"reference/flows/#funcs.flows.Reraise.error_types","title":"<code>error_types: AnyErrorTypes</code>  <code>instance-attribute</code>","text":"<p>The error types to reraise.</p>"},{"location":"reference/flows/#funcs.flows.ReraiseWith","title":"<code>ReraiseWith</code>","text":"<p>               Bases: <code>SimpleContextManager</code>, <code>Generic[E]</code></p> <p>Represents context managers that reraise errors of given <code>error_types</code> as <code>error</code>, which is computed dynamically from the original error.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>@final\n@frozen()\nclass ReraiseWith(SimpleContextManager, Generic[E]):\n    \"\"\"Represents context managers that reraise errors of given `error_types` as `error`,\n    which is computed dynamically from the original error.\n    \"\"\"\n\n    into: Into[E]\n    \"\"\"The function that computes the error to raise from the original error.\"\"\"\n    error_types: AnyErrorTypes\n    \"\"\"The error types to reraise.\"\"\"\n\n    def __enter__(self) -&gt; None:\n        pass\n\n    def __exit__(\n        self, error_type: Optional[Type[F]], error: Optional[F], traceback: Optional[Traceback]\n    ) -&gt; None:\n        if error_type is not None and error is not None:\n            if is_subclass(error_type, self.error_types):\n                raise self.into(error) from error\n</code></pre>"},{"location":"reference/flows/#funcs.flows.ReraiseWith.into","title":"<code>into: Into[E]</code>  <code>instance-attribute</code>","text":"<p>The function that computes the error to raise from the original error.</p>"},{"location":"reference/flows/#funcs.flows.ReraiseWith.error_types","title":"<code>error_types: AnyErrorTypes</code>  <code>instance-attribute</code>","text":"<p>The error types to reraise.</p>"},{"location":"reference/flows/#funcs.flows.Suppress","title":"<code>Suppress</code>","text":"<p>Represents context managers that suppress errors of given <code>error_types</code>.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>@final\n@frozen()\nclass Suppress:\n    \"\"\"Represents context managers that suppress errors of given `error_types`.\"\"\"\n\n    error_types: AnyErrorTypes\n    \"\"\"The error types to suppress.\"\"\"\n\n    def __enter__(self) -&gt; None:\n        pass\n\n    @overload\n    def __exit__(self, error_type: None, error: None, traceback: None) -&gt; Literal[False]: ...\n\n    @overload\n    def __exit__(self, error_type: Type[E], error: E, traceback: Traceback) -&gt; bool: ...\n\n    def __exit__(\n        self, error_type: Optional[Type[E]], error: Optional[E], traceback: Optional[Traceback]\n    ) -&gt; bool:\n        return error_type is not None and is_subclass(error_type, self.error_types)\n</code></pre>"},{"location":"reference/flows/#funcs.flows.Suppress.error_types","title":"<code>error_types: AnyErrorTypes</code>  <code>instance-attribute</code>","text":"<p>The error types to suppress.</p>"},{"location":"reference/flows/#funcs.flows.PostProcessing","title":"<code>PostProcessing</code>","text":"<p>               Bases: <code>Generic[R, S]</code></p> <p>Represents decorators that post-process results of function calls.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>@final\n@frozen()\nclass PostProcessing(Generic[R, S]):\n    \"\"\"Represents decorators that post-process results of function calls.\"\"\"\n\n    function: Unary[R, S]\n\n    def __call__(self, function: Callable[P, R]) -&gt; Callable[P, S]:\n        @wraps(function)\n        def wrap(*args: P.args, **kwargs: P.kwargs) -&gt; S:\n            return self.function(function(*args, **kwargs))\n\n        return wrap\n</code></pre>"},{"location":"reference/flows/#funcs.flows.WrapWith","title":"<code>WrapWith</code>","text":"<p>Represents decorators that wrap function calls with the given <code>context_manager</code>.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>@frozen()\nclass WrapWith:\n    \"\"\"Represents decorators that wrap function calls with the given `context_manager`.\"\"\"\n\n    context_manager: AnyContextManager\n    \"\"\"The context manager to wrap function calls with.\"\"\"\n\n    def __call__(self, function: Callable[P, R]) -&gt; Callable[P, R]:\n        @wraps(function)\n        def wrap(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n            with self.context_manager:\n                return function(*args, **kwargs)\n\n        return wrap\n</code></pre>"},{"location":"reference/flows/#funcs.flows.WrapWith.context_manager","title":"<code>context_manager: AnyContextManager</code>  <code>instance-attribute</code>","text":"<p>The context manager to wrap function calls with.</p>"},{"location":"reference/flows/#funcs.flows.once","title":"<code>once(function: Callable[P, R]) -&gt; Callable[P, R]</code>","text":"<p>Wraps the function to be called once, and then the computed result is returned on subsequent calls.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[P, R]</code> <p>The function to wrap.</p> required <p>Returns:</p> Type Description <code>Callable[P, R]</code> <p>The wrapped function.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>def once(function: Callable[P, R]) -&gt; Callable[P, R]:\n    \"\"\"Wraps the function to be called once, and then the\n    computed result is returned on subsequent calls.\n\n    Arguments:\n        function: The function to wrap.\n\n    Returns:\n        The wrapped function.\n    \"\"\"\n    result: MarkerOr[R] = marker\n\n    @wraps(function)\n    def wrap(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n        nonlocal result\n\n        if not is_marker(result):\n            return result\n\n        result = function(*args, **kwargs)\n\n        return result\n\n    return wrap\n</code></pre>"},{"location":"reference/flows/#funcs.flows.reraise","title":"<code>reraise(error: E, *error_types: AnyErrorType) -&gt; Reraise[E]</code>","text":"<p>Constructs the <code>Reraise[E]</code> context manager that reraises errors of given <code>error_types</code> as <code>error</code>.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>E</code> <p>The error to raise.</p> required <code>*error_types</code> <code>AnyErrorType</code> <p>The error types to reraise.</p> <code>()</code> <p>Returns:</p> Type Description <code>Reraise[E]</code> <p>The constructed <code>Reraise[E]</code> context manager.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>def reraise(error: E, *error_types: AnyErrorType) -&gt; Reraise[E]:\n    \"\"\"Constructs the [`Reraise[E]`][funcs.flows.Reraise] context manager\n    that reraises errors of given `error_types` as `error`.\n\n    Arguments:\n        error: The error to raise.\n        *error_types: The error types to reraise.\n\n    Returns:\n        The constructed [`Reraise[E]`][funcs.flows.Reraise] context manager.\n    \"\"\"\n    return Reraise(error, error_types)\n</code></pre>"},{"location":"reference/flows/#funcs.flows.reraise_with","title":"<code>reraise_with(into: Into[E], *error_types: AnyErrorType) -&gt; ReraiseWith[E]</code>","text":"<p>Constructs the <code>ReraiseWith[E]</code> context manager that reraises errors of given <code>error_types</code> as <code>error</code>, which is computed dynamically from the original error.</p> <p>Parameters:</p> Name Type Description Default <code>into</code> <code>Into[E]</code> <p>The function that computes the error to raise from the original error.</p> required <code>*error_types</code> <code>AnyErrorType</code> <p>The error types to reraise.</p> <code>()</code> <p>Returns:</p> Type Description <code>ReraiseWith[E]</code> <p>The constructed <code>ReraiseWith[E]</code> context manager.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>def reraise_with(into: Into[E], *error_types: AnyErrorType) -&gt; ReraiseWith[E]:\n    \"\"\"Constructs the [`ReraiseWith[E]`][funcs.flows.ReraiseWith] context manager\n    that reraises errors of given `error_types` as `error`, which is computed dynamically\n    from the original error.\n\n    Arguments:\n        into: The function that computes the error to raise from the original error.\n        *error_types: The error types to reraise.\n\n    Returns:\n        The constructed [`ReraiseWith[E]`][funcs.flows.ReraiseWith] context manager.\n    \"\"\"\n    return ReraiseWith(into, error_types)\n</code></pre>"},{"location":"reference/flows/#funcs.flows.suppress","title":"<code>suppress(*error_types: AnyErrorType) -&gt; Suppress</code>","text":"<p>Constructs the <code>Suppress</code> context manager used to suppress errors of given <code>error_types</code>.</p> <p>Parameters:</p> Name Type Description Default <code>*error_types</code> <code>AnyErrorType</code> <p>The error types to suppress.</p> <code>()</code> <p>Returns:</p> Type Description <code>Suppress</code> <p>The constructed <code>Suppress</code> context manager.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>def suppress(*error_types: AnyErrorType) -&gt; Suppress:\n    \"\"\"Constructs the [`Suppress`][funcs.flows.Suppress] context manager used to suppress\n    errors of given `error_types`.\n\n    Arguments:\n        *error_types: The error types to suppress.\n\n    Returns:\n        The constructed [`Suppress`][funcs.flows.Suppress] context manager.\n    \"\"\"\n    return Suppress(error_types)\n</code></pre>"},{"location":"reference/flows/#funcs.flows.post_processing","title":"<code>post_processing(function: Unary[R, S]) -&gt; PostProcessing[R, S]</code>","text":"<p>Constructs the <code>PostProcessing[R, S]</code> decorator which post-processes results of function calls.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Unary[R, S]</code> <p>The post-processing function.</p> required <p>Returns:</p> Type Description <code>PostProcessing[R, S]</code> <p>The constructed <code>PostProcessing[R, S]</code> decorator.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>def post_processing(function: Unary[R, S]) -&gt; PostProcessing[R, S]:\n    \"\"\"Constructs the [`PostProcessing[R, S]`][funcs.flows.PostProcessing] decorator\n    which post-processes results of function calls.\n\n    Arguments:\n        function: The post-processing function.\n\n    Returns:\n        The constructed [`PostProcessing[R, S]`][funcs.flows.PostProcessing] decorator.\n    \"\"\"\n    return PostProcessing(function)\n</code></pre>"},{"location":"reference/flows/#funcs.flows.wrap_with","title":"<code>wrap_with(context_manager: AnyContextManager) -&gt; WrapWith</code>","text":"<p>Constructs the <code>WrapWith</code> decorator that wraps function calls with the given <code>context_manager</code>.</p> <p>Parameters:</p> Name Type Description Default <code>context_manager</code> <code>AnyContextManager</code> <p>The context manager to wrap function calls with.</p> required <p>Returns:</p> Type Description <code>WrapWith</code> <p>The constructed <code>WrapWith</code> decorator.</p> Source code in <code>src/funcs/flows.py</code> <pre><code>def wrap_with(context_manager: AnyContextManager) -&gt; WrapWith:\n    \"\"\"Constructs the [`WrapWith`][funcs.flows.WrapWith] decorator that wraps function calls\n    with the given `context_manager`.\n\n    Arguments:\n        context_manager: The context manager to wrap function calls with.\n\n    Returns:\n        The constructed [`WrapWith`][funcs.flows.WrapWith] decorator.\n    \"\"\"\n    return WrapWith(context_manager)\n</code></pre>"},{"location":"reference/functions/","title":"Functions","text":""},{"location":"reference/functions/#funcs.functions.awaiting","title":"<code>awaiting(awaitable: Awaitable[T]) -&gt; T</code>  <code>async</code>","text":"<p>Wraps an awaitable into a coroutine.</p> <p>This function is useful in, for example, <code>asyncio</code>, where some functions expect coroutines only.</p> <p>Parameters:</p> Name Type Description Default <code>awaitable</code> <code>Awaitable[T]</code> <p>The awaitable to wrap.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The result of <code>await awaitable</code>.</p> Source code in <code>src/funcs/functions.py</code> <pre><code>async def awaiting(awaitable: Awaitable[T]) -&gt; T:\n    \"\"\"Wraps an awaitable into a coroutine.\n\n    This function is useful in, for example, [`asyncio`][asyncio],\n    where some functions expect coroutines only.\n\n    Arguments:\n        awaitable: The awaitable to wrap.\n\n    Returns:\n        The result of `await awaitable`.\n    \"\"\"\n    return await awaitable\n</code></pre>"},{"location":"reference/functions/#funcs.functions.asyncify","title":"<code>asyncify(function: Callable[P, R]) -&gt; AsyncCallable[P, R]</code>","text":"<p>Wraps the synchronous function to be called asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[P, R]</code> <p>The synchronous function to wrap.</p> required <p>Returns:</p> Type Description <code>AsyncCallable[P, R]</code> <p>The wrapped asynchronous function.</p> Source code in <code>src/funcs/functions.py</code> <pre><code>def asyncify(function: Callable[P, R]) -&gt; AsyncCallable[P, R]:\n    \"\"\"Wraps the synchronous function to be called asynchronously.\n\n    Arguments:\n        function: The synchronous function to wrap.\n\n    Returns:\n        The wrapped asynchronous function.\n    \"\"\"\n\n    @wraps(function)\n    async def async_function(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n        return function(*args, **kwargs)\n\n    return async_function\n</code></pre>"},{"location":"reference/functions/#funcs.functions.identity","title":"<code>identity(item: T) -&gt; T</code>","text":"<p>Returns the given <code>item</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>T</code> <p>The item to return.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The given item.</p> Source code in <code>src/funcs/functions.py</code> <pre><code>def identity(item: T) -&gt; T:\n    \"\"\"Returns the given `item`.\n\n    Arguments:\n        item: The item to return.\n\n    Returns:\n        The given item.\n    \"\"\"\n    return item\n</code></pre>"},{"location":"reference/functions/#funcs.functions.returns","title":"<code>returns(item: T) -&gt; Nullary[T]</code>","text":"<p>Creates a function that returns the given <code>item</code> when called.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>T</code> <p>The item to return.</p> required <p>Returns:</p> Type Description <code>Nullary[T]</code> <p>The function that returns the given item.</p> Source code in <code>src/funcs/functions.py</code> <pre><code>def returns(item: T) -&gt; Nullary[T]:\n    \"\"\"Creates a function that returns the given `item` when called.\n\n    Arguments:\n        item: The item to return.\n\n    Returns:\n        The function that returns the given item.\n    \"\"\"\n\n    def return_item() -&gt; T:\n        return item\n\n    return return_item\n</code></pre>"},{"location":"reference/functions/#funcs.functions.raises","title":"<code>raises(error: AnyError) -&gt; Nullary[Never]</code>","text":"<p>Creates a function that always raises the given <code>error</code> when called.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>AnyError</code> <p>The error to raise.</p> required <p>Returns:</p> Type Description <code>Nullary[Never]</code> <p>The function that always raises the given error.</p> Source code in <code>src/funcs/functions.py</code> <pre><code>def raises(error: AnyError) -&gt; Nullary[Never]:\n    \"\"\"Creates a function that always raises the given `error` when called.\n\n    Arguments:\n        error: The error to raise.\n\n    Returns:\n        The function that always raises the given error.\n    \"\"\"\n\n    def raise_error() -&gt; Never:\n        raise error\n\n    return raise_error\n</code></pre>"},{"location":"reference/functions/#funcs.functions.flip","title":"<code>flip(binary: Binary[T, U, R]) -&gt; Binary[U, T, R]</code>","text":"<p>Creates a function that flips arguments of the given <code>binary</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>binary</code> <code>Binary[T, U, R]</code> <p>The binary function to flip.</p> required <p>Returns:</p> Type Description <code>Binary[U, T, R]</code> <p>The flipped binary function.</p> Source code in <code>src/funcs/functions.py</code> <pre><code>def flip(binary: Binary[T, U, R]) -&gt; Binary[U, T, R]:\n    \"\"\"Creates a function that flips arguments of the given `binary` function.\n\n    Arguments:\n        binary: The binary function to flip.\n\n    Returns:\n        The flipped binary function.\n    \"\"\"\n\n    def flipped(u: U, t: T) -&gt; R:\n        return binary(t, u)\n\n    return flipped\n</code></pre>"},{"location":"reference/functions/#funcs.functions.complement","title":"<code>complement(predicate: GenericPredicate[P]) -&gt; GenericPredicate[P]</code>","text":"<p>Wraps the given <code>predicate</code> to return the negated result.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>GenericPredicate[P]</code> <p>The predicate to wrap.</p> required <p>Returns:</p> Type Description <code>GenericPredicate[P]</code> <p>The wrapped predicate.</p> Source code in <code>src/funcs/functions.py</code> <pre><code>def complement(predicate: GenericPredicate[P]) -&gt; GenericPredicate[P]:\n    \"\"\"Wraps the given `predicate` to return the negated result.\n\n    Arguments:\n        predicate: The predicate to wrap.\n\n    Returns:\n        The wrapped predicate.\n    \"\"\"\n\n    def negate(*args: P.args, **kwargs: P.kwargs) -&gt; bool:\n        return not predicate(*args, **kwargs)\n\n    return negate\n</code></pre>"},{"location":"reference/getters/","title":"Getters","text":""},{"location":"reference/getters/#funcs.getters.attribute_getter","title":"<code>attribute_getter = standard_attribute_getter</code>  <code>module-attribute</code>","text":"<p>An alias of the standard <code>attribute_getter</code> type that implements attribute fetching.</p>"},{"location":"reference/getters/#funcs.getters.item_getter","title":"<code>item_getter = standard_item_getter</code>  <code>module-attribute</code>","text":"<p>An alias of the standard <code>item_getter</code> type that implements item fetching.</p>"},{"location":"reference/primitives/","title":"Primitives","text":""},{"location":"reference/primitives/#funcs.primitives.increment","title":"<code>increment(x: int) -&gt; int</code>","text":"<p>Increments <code>x</code> by 1.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The value to increment.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The incremented value.</p> Source code in <code>src/funcs/primitives.py</code> <pre><code>def increment(x: int) -&gt; int:\n    \"\"\"Increments `x` by 1.\n\n    Arguments:\n        x: The value to increment.\n\n    Returns:\n        The incremented value.\n    \"\"\"\n    return x + 1\n</code></pre>"},{"location":"reference/primitives/#funcs.primitives.decrement","title":"<code>decrement(x: int) -&gt; int</code>","text":"<p>Decrements <code>x</code> by 1.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The value to decrement.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The decremented value.</p> Source code in <code>src/funcs/primitives.py</code> <pre><code>def decrement(x: int) -&gt; int:\n    \"\"\"Decrements `x` by 1.\n\n    Arguments:\n        x: The value to decrement.\n\n    Returns:\n        The decremented value.\n    \"\"\"\n    return x - 1\n</code></pre>"},{"location":"reference/primitives/#funcs.primitives.is_even","title":"<code>is_even(x: int) -&gt; bool</code>","text":"<p>Checks if <code>x</code> is even.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether <code>x</code> is even.</p> Source code in <code>src/funcs/primitives.py</code> <pre><code>def is_even(x: int) -&gt; bool:\n    \"\"\"Checks if `x` is even.\n\n    Arguments:\n        x: The value to check.\n\n    Returns:\n        Whether `x` is even.\n    \"\"\"\n    return not x % 2\n</code></pre>"},{"location":"reference/primitives/#funcs.primitives.is_odd","title":"<code>is_odd(x: int) -&gt; bool</code>","text":"<p>Checks if <code>x</code> is odd.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether <code>x</code> is odd.</p> Source code in <code>src/funcs/primitives.py</code> <pre><code>def is_odd(x: int) -&gt; bool:\n    \"\"\"Checks if `x` is odd.\n\n    Arguments:\n        x: The value to check.\n\n    Returns:\n        Whether `x` is odd.\n    \"\"\"\n    return not is_even(x)\n</code></pre>"},{"location":"reference/reduction/","title":"Reduction","text":""},{"location":"reference/reduction/#funcs.reduction.reduce","title":"<code>reduce(function: Binary[T, T, T], iterable: Iterable[T]) -&gt; T</code>","text":"<p>Reduces the given <code>iterable</code> using the <code>function</code>.</p> Example <pre><code>from operator import add\n\nfrom funcs.reduction import reduce\n\nprint(reduce(add, [1, 2, 3, 4, 5]))  # 15\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Binary[T, T, T]</code> <p>The function to use in reduction.</p> required <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to reduce.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The reduced value.</p> Source code in <code>src/funcs/reduction.py</code> <pre><code>def reduce(function: Binary[T, T, T], iterable: Iterable[T]) -&gt; T:\n    \"\"\"Reduces the given `iterable` using the `function`.\n\n    Example:\n        ```python\n        from operator import add\n\n        from funcs.reduction import reduce\n\n        print(reduce(add, [1, 2, 3, 4, 5]))  # 15\n        ```\n\n    Arguments:\n        function: The function to use in reduction.\n        iterable: The iterable to reduce.\n\n    Returns:\n        The reduced value.\n    \"\"\"\n    return standard_reduce(function, iterable)\n</code></pre>"},{"location":"reference/reduction/#funcs.reduction.fold","title":"<code>fold(initial: U, function: Binary[U, T, U], iterable: Iterable[T]) -&gt; U</code>","text":"<p>Folds the given <code>iterable</code> using the <code>function</code> and the <code>initial</code> value.</p> <p>Parameters:</p> Name Type Description Default <code>initial</code> <code>U</code> <p>The initial value to use in folding.</p> required <code>function</code> <code>Binary[U, T, U]</code> <p>The function to use in folding.</p> required <code>iterable</code> <code>Iterable[T]</code> <p>The iterable to fold.</p> required <p>Returns:</p> Type Description <code>U</code> <p>The folded value.</p> Source code in <code>src/funcs/reduction.py</code> <pre><code>def fold(initial: U, function: Binary[U, T, U], iterable: Iterable[T]) -&gt; U:\n    \"\"\"Folds the given `iterable` using the `function` and the `initial` value.\n\n    Arguments:\n        initial: The initial value to use in folding.\n        function: The function to use in folding.\n        iterable: The iterable to fold.\n\n    Returns:\n        The folded value.\n    \"\"\"\n    return standard_reduce(function, iterable, initial)\n</code></pre>"},{"location":"reference/unpacking/","title":"Unpacking","text":""},{"location":"reference/unpacking/#funcs.unpacking.unpack_nullary","title":"<code>unpack_nullary(function: Nullary[R]) -&gt; UnpackNullary[R]</code>","text":"<p>Creates a function that unpacks nullary tuples to call the given <code>function</code>.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Nullary[R]</code> <p>The function to call.</p> required <p>Returns:</p> Type Description <code>UnpackNullary[R]</code> <p>The unpacking function.</p> Source code in <code>src/funcs/unpacking.py</code> <pre><code>def unpack_nullary(function: Nullary[R]) -&gt; UnpackNullary[R]:\n    \"\"\"Creates a function that unpacks nullary tuples to call the given `function`.\n\n    Arguments:\n        function: The function to call.\n\n    Returns:\n        The unpacking function.\n    \"\"\"\n\n    def unpack(items: EmptyTuple) -&gt; R:\n        return function()\n\n    return unpack\n</code></pre>"},{"location":"reference/unpacking/#funcs.unpacking.unpack_unary","title":"<code>unpack_unary(function: Unary[T, R]) -&gt; UnpackUnary[T, R]</code>","text":"<p>Creates a function that unpacks unary tuples to call the given <code>function</code>.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Unary[T, R]</code> <p>The function to call.</p> required <p>Returns:</p> Type Description <code>UnpackUnary[T, R]</code> <p>The unpacking function.</p> Source code in <code>src/funcs/unpacking.py</code> <pre><code>def unpack_unary(function: Unary[T, R]) -&gt; UnpackUnary[T, R]:\n    \"\"\"Creates a function that unpacks unary tuples to call the given `function`.\n\n    Arguments:\n        function: The function to call.\n\n    Returns:\n        The unpacking function.\n    \"\"\"\n\n    def unpack(items: Tuple[T]) -&gt; R:\n        (t,) = items\n\n        return function(t)\n\n    return unpack\n</code></pre>"},{"location":"reference/unpacking/#funcs.unpacking.unpack_binary","title":"<code>unpack_binary(function: Binary[T, U, R]) -&gt; UnpackBinary[T, U, R]</code>","text":"<p>Creates a function that unpacks binary tuples to call the given <code>function</code>.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Binary[T, U, R]</code> <p>The function to call.</p> required <p>Returns:</p> Type Description <code>UnpackBinary[T, U, R]</code> <p>The unpacking function.</p> Source code in <code>src/funcs/unpacking.py</code> <pre><code>def unpack_binary(function: Binary[T, U, R]) -&gt; UnpackBinary[T, U, R]:\n    \"\"\"Creates a function that unpacks binary tuples to call the given `function`.\n\n    Arguments:\n        function: The function to call.\n\n    Returns:\n        The unpacking function.\n    \"\"\"\n\n    def unpack(items: Tuple[T, U]) -&gt; R:\n        (t, u) = items\n\n        return function(t, u)\n\n    return unpack\n</code></pre>"},{"location":"reference/unpacking/#funcs.unpacking.unpack_ternary","title":"<code>unpack_ternary(function: Ternary[T, U, V, R]) -&gt; UnpackTernary[T, U, V, R]</code>","text":"<p>Creates a function that unpacks ternary tuples to call the given <code>function</code>.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Ternary[T, U, V, R]</code> <p>The function to call.</p> required <p>Returns:</p> Type Description <code>UnpackTernary[T, U, V, R]</code> <p>The unpacking function.</p> Source code in <code>src/funcs/unpacking.py</code> <pre><code>def unpack_ternary(function: Ternary[T, U, V, R]) -&gt; UnpackTernary[T, U, V, R]:\n    \"\"\"Creates a function that unpacks ternary tuples to call the given `function`.\n\n    Arguments:\n        function: The function to call.\n\n    Returns:\n        The unpacking function.\n    \"\"\"\n\n    def unpack(items: Tuple[T, U, V]) -&gt; R:\n        (t, u, v) = items\n\n        return function(t, u, v)\n\n    return unpack\n</code></pre>"},{"location":"reference/unpacking/#funcs.unpacking.unpack_quaternary","title":"<code>unpack_quaternary(function: Quaternary[T, U, V, W, R]) -&gt; UnpackQuaternary[T, U, V, W, R]</code>","text":"<p>Creates a function that unpacks quaternary tuples to call the given <code>function</code>.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Quaternary[T, U, V, W, R]</code> <p>The function to call.</p> required <p>Returns:</p> Type Description <code>UnpackQuaternary[T, U, V, W, R]</code> <p>The unpacking function.</p> Source code in <code>src/funcs/unpacking.py</code> <pre><code>def unpack_quaternary(function: Quaternary[T, U, V, W, R]) -&gt; UnpackQuaternary[T, U, V, W, R]:\n    \"\"\"Creates a function that unpacks quaternary tuples to call the given `function`.\n\n    Arguments:\n        function: The function to call.\n\n    Returns:\n        The unpacking function.\n    \"\"\"\n\n    def unpack(items: Tuple[T, U, V, W]) -&gt; R:\n        (t, u, v, w) = items\n\n        return function(t, u, v, w)\n\n    return unpack\n</code></pre>"}]}